#include <iostream>
#include <cfloat>
#include "../mp2p-fem1d/mp2p_fem1d.hpp"

int main()
{
    
    // variables
    double c1_a = 0.30;
    double c2_a = 0.20;
    double c2_b = 0.10;
    double diff1 = 0.05;
    double diff2 = 0.006;
    double k = 0.40;

    // initialize mesh
    // this can be shared among variables that occupy the same domain
    MeshLine2 mesh_dom1("input/06_input/mesh_point_dom1.csv", "input/06_input/mesh_element_dom1.csv");  // mesh for domain 1
    MeshLine2 mesh_dom2("input/06_input/mesh_point_dom2.csv", "input/06_input/mesh_element_dom2.csv");  // mesh for domain 2

    // initialize boundary conditions
    // need one boundary condition for each variable and domain
    BoundaryLine2 boundary_c1_dom1("input/06_input/boundary_flux_dom1_c1.csv", "input/06_input/boundary_value_dom1_c1.csv");  // boundary for domain 1 species 1
    boundary_c1_dom1.set_boundarycondition(0, "dirichlet", {c1_a});
    boundary_c1_dom1.set_boundarycondition(1, "neumann", {0});  // no flux
    BoundaryLine2 boundary_c2_dom1("input/06_input/boundary_flux_dom1_c2.csv", "input/06_input/boundary_value_dom1_c2.csv");  // boundary for domain 1 species 2
    boundary_c2_dom1.set_boundarycondition(2, "dirichlet", {c2_a});
    BoundaryLine2 boundary_c2_dom2("input/06_input/boundary_flux_dom2_c2.csv", "input/06_input/boundary_value_dom2_c2.csv");  // boundary for domain 2 species 2
    boundary_c2_dom2.set_boundarycondition(3, "dirichlet", {c2_b});

    // initialize integrals
    // this can be shared among variables that occupy the same domain
    IntegralLine2 integral_dom1(mesh_dom1);  // intergrals for domain 1
    IntegralLine2 integral_dom2(mesh_dom2);  // intergrals for domain 1

    // initialize variables
    // these are unknowns to be solved for
    VariableLine2 c1_dom1(mesh_dom1, 0.0);  // supplied an initial guess of 0 for c1 in domain 1
    VariableLine2 c2_dom1(mesh_dom1, 0.0);  // supplied an initial guess of 0 for c2 in domain 1
    VariableLine2 c2_dom2(mesh_dom2, 0.0);  // supplied an initial guess of 0 for c2 in domain 2

    // initialize scalars
    ScalarLine2 diff1_dom1(mesh_dom1, diff1);  // supplied a constant value for c1 in domain 1
    ScalarLine2 diff2_dom1(mesh_dom1, diff2);  // supplied a constant value for c2 in domain 1
    ScalarLine2 diff2_dom2(mesh_dom2, diff2);  // supplied a constant value for c2 in domain 2
    ScalarLine2 rxnrate1_dom1(mesh_dom1, 0.0);  // use a placeholder value
    ScalarLine2 rxnrate2_dom1(mesh_dom1, 0.0);  // use a placeholder value
    ScalarLine2 rxnrate2_dom2(mesh_dom2, 0.0);  // use a placeholder value

    // set up two physics - one for each species

    // the physics for species 1 acts on domain 1, so group the mesh, etc. for domain 1
    MeshField mesh_fld1({&mesh_dom1});
    BoundaryField boundary_fld1({&boundary_c1_dom1});
    IntegralField integral_fld1({&integral_dom1});
    VariableField c1_fld1({&c1_dom1});
    ScalarField diff1_fld1({&diff1_dom1});
    ScalarField rxnrate1_fld1({&rxnrate1_dom1});

    // the physics for species 2 acts on domain 1 and 2, so group the mesh, etc. for domain 1 and 2
    MeshField mesh_fld2({&mesh_dom1, &mesh_dom2});
    BoundaryField boundary_fld2({&boundary_c2_dom1, &boundary_c2_dom2});
    IntegralField integral_fld2({&integral_dom1, &integral_dom2});
    VariableField c2_fld2({&c2_dom1, &c2_dom2});
    ScalarField diff2_fld2({&diff2_dom1, &diff2_dom2});
    ScalarField rxnrate2_fld2({&rxnrate2_dom1, &rxnrate2_dom2});

    // initialize physics
    // 0 = -div(-b * grad(u)) + c
    // value (to be solved for), u - c1 or c2
    // diffusion coefficient, b - diffusion coefficient
    // generation coefficient, c - rate of reaction
    PhysicsSteadyDiffusion diffusion1(mesh_fld1, boundary_fld1, integral_fld1, c1_fld1, diff1_fld1, rxnrate1_fld1);
    PhysicsSteadyDiffusion diffusion2(mesh_fld2, boundary_fld2, integral_fld2, c2_fld2, diff2_fld2, rxnrate2_fld2);

    // load physics into matrix equation
    // this will set up the system of equations to be solved for (Ax = b)
    MatrixEquationSteady matrixeq({&diffusion1, &diffusion2});

    // initialize for iteration
    int num_iter_max = 500;  // maximum number of iterations
    double l2_norm_tol = 1e-5;  // stop if L2 norm reaches this
    double l2_norm = DBL_MAX;

    // iterate to convergence
    for (int it = 0; it < num_iter_max; it++)
    {
        
        // iterate over domain ID (did) of points in domain
        // calculate rate of reaction
        for (int did = 0; did < mesh_dom1.num_point_domain; did++)
        {
            double rxn_rate = k * c1_dom1.point_value_vec[did] * c2_dom1.point_value_vec[did];
            rxnrate1_dom1.point_value_vec[did] = -rxn_rate; // consumed by reaction
            rxnrate2_dom1.point_value_vec[did] = +rxn_rate; // generated by reaction
        }

        // perform one iteration of the matrix equation
        Eigen::VectorXd x_last_iteration_vec = matrixeq.x_vec;  // store x in Ax = b
        matrixeq.iterate_solution();  // solve for x
        Eigen::VectorXd x_next_iteration_vec = matrixeq.x_vec;  // store new x
        matrixeq.store_solution();  // transfer values of x into variable objects

        // calculate L2 norm
        l2_norm = (x_next_iteration_vec - x_last_iteration_vec).norm();
        std::cout << "Iteration: " << it << ", L2 Norm: " << l2_norm << "\n";

        // stop if convergence is reached
        if (l2_norm < l2_norm_tol)
        {
            break;
        }

    }

    // output results
    c1_dom1.output_csv("output/06_output/c1_dom1.csv");
    c2_dom1.output_csv("output/06_output/c2_dom1.csv");
    c2_dom2.output_csv("output/06_output/c2_dom2.csv");

}
